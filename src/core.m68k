; ---------------------------------------------------------------------------
; Mega Drive Framework
; By Devon 2022
; ---------------------------------------------------------------------------
; Core source
; ---------------------------------------------------------------------------

	include	"megadrive.i"
	include	"debugger.i"
	include	"variables.i"

; ---------------------------------------------------------------------------
; Vector table
; ---------------------------------------------------------------------------

	ORG	CARTROM
	CPU	68000

	dc.l	stack_base				; Stack pointer
	dc.l	Initialize				; Program start

	dc.l	BusError				; Bus error
	dc.l	AddressError				; Address error
	dc.l	IllegalInstr				; Illegal instruction
	dc.l	ZeroDivide				; Division by zero
	dc.l	ChkInstr				; CHK exception
	dc.l	TrapvInstr				; TRAPV exception
	dc.l	PrivilegeViol				; Privilege violation
	dc.l	Trace					; TRACE exception
	dc.l	Line1010Emu				; Line-A emulator
	dc.l	Line1111Emu				; Line-F emulator

	dcb.l	12, ErrorExcept				; Reserved

	dc.l	ErrorExcept				; Spurious exception
	dc.l	ErrorExcept				; IRQ1
	dc.l	external_int				; External interrupt
	dc.l	ErrorExcept				; IRQ3
	dc.l	hblank_int				; H-BLANK interrupt
	dc.l	ErrorExcept				; IRQ5
	dc.l	VBlank_int				; V-BLANK interrupt
	dc.l	ErrorExcept				; IRQ7

	dc.l	ErrorExcept				; TRAP #00
	dc.l	ErrorExcept				; TRAP #01
	dc.l	ErrorExcept				; TRAP #02
	dc.l	ErrorExcept				; TRAP #03
	dc.l	ErrorExcept				; TRAP #04
	dc.l	ErrorExcept				; TRAP #05
	dc.l	ErrorExcept				; TRAP #06
	dc.l	ErrorExcept				; TRAP #07
	dc.l	ErrorExcept				; TRAP #08
	dc.l	ErrorExcept				; TRAP #09
	dc.l	ErrorExcept				; TRAP #10
	dc.l	ErrorExcept				; TRAP #11
	dc.l	ErrorExcept				; TRAP #12
	dc.l	ErrorExcept				; TRAP #13
	dc.l	ErrorExcept				; TRAP #14
	dc.l	ErrorExcept				; TRAP #15

	dcb.l	16, ErrorExcept				; Reserved

; ---------------------------------------------------------------------------
; ROM header
; ---------------------------------------------------------------------------

	dc.b	"SEGA MEGA DRIVE "			; Hardware ID

	STRSZ	7, "\COPYRIGHT"				; Copyright
	dc.b	" "
	NUMSTR	4, _year+1900
	dc.b	"."
	MTHSTR	_month

	if DEBUG=0					; Game name
		STRSZ	$30, "\GAME_NAME"
		STRSZ	$30, "\GAME_NAME"
	else
		STRSZ	$20, "\GAME_NAME"
		BUILDDATE
		STRSZ	$20, "\GAME_NAME"
		BUILDDATE
	endif

	dc.b	"GM "					; Serial number
	STRSZ	8, "\SERIAL"
	dc.b	"-"
	NUMSTR	2, REVISION

	dc.w	0					; Checksum
	STRSZ	$10, "\IO_SUPPORT"			; I/O suuport

	dc.l	CARTROM					; ROM addresses
	dc.l	CARTROM_END
	dc.l	WORKRAM&$FFFFFF				; Work RAM addresses
	dc.l	WORKRAM_END&$FFFFFF
	if SRAM_SIZE=0					; Save RAM support
		dcb.b	$C, " "
	else
		dc.b	"RA", $F8, $20
		dc.l	SRAM
		dc.l	SRAM_END
	endif
	
	dcb.b	$C, " "					; Modem support
	dcb.b	$28, " "				; Reserved
	STRSZ	$10, "JUE"				; Region support

; ---------------------------------------------------------------------------
; Program initialization
; ---------------------------------------------------------------------------

Initialize:
	move	#$2700,sr				; Reset status register
	movem.l	.InitAddrRegs(pc),a0-sp			; Get address register values

	move.b	VERSION-IOCTRL1(sp),d3			; Get console version
	moveq	#$F,d0					; Satisfy TMSS
	and.b	d3,d0
	beq.s	.SkipTMSS
	move.l	(a3),TMSSSEGA-IOCTRL1(sp)

.SkipTMSS:
	move.w	(a1),d0					; Test VDP

	move.l	a6,d0					; Clear d0
	move.l	a6,usp					; Clear usp

	moveq	#.PSGRegsEnd-.PSGRegs-1,d1		; Initialize PSG registers

.InitPSG:
	move.b	(a4)+,PSGCTRL-VDPDATA(a0)
	dbf	d1,.InitPSG

	moveq	#.VDPRegsEnd-.VDPRegs-1,d1		; Initialize VDP registers
	move.w	#$8000,d2

.InitVDPRegs:
	move.b	(a4)+,d2
	move.w	d2,(a1)
	add.w	a3,d2
	dbf	d1,.InitVDPRegs

	move.w	a3,(a2)					; Stop Z80
	move.w	a3,Z80RESET-Z80BUS(a2)			; Cancel Z80 reset

.WaitZ80Stop:
	btst	d0,(a2)					; Wait for Z80 to stop
	bne.s	.WaitZ80Stop

	move.w	#(stack_base-local_vars)/2-1,d1		; Clear stack and local variables

.ClearVars:
	move.w	d0,-(a6)
	dbf	d1,.ClearVars

	move.w	#(saved_vars_end-WORKRAM)/2-1,d1	; Set to clear saved variables
	if (saved_vars_end-saved_vars)<>0
		tst.l	-1(sp)				; Was there a soft reset?
		bne.s	.SkipSavedVars			; If so, branch
		tst.w	(IODATA3-IODATA1)-1(sp)
		beq.s	.ClearVars2			; If not, branch

.SkipSavedVars:
		if ((saved_vars_end-saved_vars)/2)>8	; Skip over saved variables
			subi.w	#(saved_vars_end-saved_vars)/2,d1
		else
			subq.w	#(saved_vars_end-saved_vars)/2,d1
		endif
		lea	-(saved_vars_end-saved_vars)(a6),a6
	endif

.ClearVars2:
	move.w	d0,-(a6)
	dbf	d1,.ClearVars2
	
.InitIOPorts:
	move.b	(a4),(sp)+				; Initialize I/O ports
	move.b	(a4),(sp)+
	move.b	(a4),(sp)+
	
	movea.l	CARTROM.w,sp				; Reset stack pointer

	move.l	(a4)+,(a1)				; Set VRAM clear command
	move.w	d0,(a0)					; Start VRAM clear
	
	moveq	#.InitZ80PrgEnd-.InitZ80Prg,d1		; Load Z80 program

.LoadZ80Prg:
	move.b	(a4)+,(a5)+
	dbf	d1,.LoadZ80Prg

	move.w	d0,Z80RESET-Z80BUS(a2)			; Reset Z80
	moveq	#$7F,d1
	dbf	d1,*
	move.w	d0,(a2)					; Start Z80
	move.w	a3,Z80RESET-Z80BUS(a2)			; Cancel Z80 reset

	DMAWAIT	a1					; Wait for the DMA to finish
	move.w	#$8F02,(a1)				; Set VDP auto increment to 2

	VDPCMD	move.l,$0000,CRAM,WRITE,d2		; Clear CRAM
	move.l	d2,(a1)
	moveq	#CRAM_SIZE/4-1,d1

.ClearCRAM:
	move.l	d0,(a0)
	dbf	d1,.ClearCRAM

	VDPCMD	move.l,$0000,VSRAM,WRITE,(a1)		; Clear VSRAM
	moveq	#VSRAM_SIZE/4-1,d1

.ClearVSRAM:
	move.l	d0,(a0)
	dbf	d1,.ClearVSRAM

	move.l	#"INIT",d1				; Initialized flag value
	cmp.l	initialized.w,d1			; Has the checksum check already been run?
	beq.s	.ChecksumGood				; If so, branch

	lea	CARTROM+$200.w,a2			; Calculate checksum

.CalcChecksum:
	add.w	(a2)+,d0
	cmp.l	CARTROM+$1A4.w,a2
	bcs.s	.CalcChecksum
	cmp.w	CARTROM+$18E.w,d0			; Does it match the checksum in the header?
	beq.s	.ChecksumGood				; If so, branch

	move.l	d2,(a1)					; If not, make screen red
	move.w	#$E,(a0)
	stop	#$2700					; Stop here forever

.ChecksumGood:
	move.l	d1,initialized.w			; Mark checksum as checked
	move.b	d3,console_ver.w			; Set console version

	move.w	#$4E73,d0				; Set up interrupts
	move.w	d0,external_int.w
	move.w	d0,hblank_int.w
	move.w	d0,vblank_int.w

	bsr.w	FindMCDBIOS				; Find Mega CD BIOS
	scc	mcd_found.w
	bcs.s	.NoMCD					; If it wasn't found, branch
	move.l	a0,mcd_sub_bios.w			; Store Sub CPU BIOS address

.NoMCD:
	movem.l	(a6),d0-a6				; Clear registers
	
	jmp	Main					; Go to main routine

; ---------------------------------------------------------------------------

.InitAddrRegs:
	dc.l	VDPDATA					; a0: VDP data port
	dc.l	VDPCTRL					; a1: VDP control port
	dc.l	Z80BUS					; a2: Z80 bus request port
	dc.l	$100					; a3: $100
	dc.l	.InitData				; a4: Initialization data
	dc.l	Z80RAM					; a5: Z80 RAM
	dc.l	0					; a6: 0
	dc.l	IOCTRL1					; sp: I/O control port 1

.InitData:
.PSGRegs:
	dc.b	(((0)<<5)|$90)|15			; PSG1 minimum volume
	dc.b	(((1)<<5)|$90)|15			; PSG2 minimum volume
	dc.b	(((2)<<5)|$90)|15			; PSG3 minimum volume
	dc.b	(((3)<<5)|$90)|15			; PSG4 minimum volume
.PSGRegsEnd:

.VDPRegs:
	dc.b	%00000100				; H-INT off
	dc.b	%00110100				; Display off, V-INT on, DMA on
	dc.b	$C000/$400				; Plane A address
	dc.b	$D000/$400				; Window plane address
	dc.b	$E000/$2000				; Plane B address
	dc.b	$F800/$200				; Sprite table address
	dc.b	0					; Unused
	dc.b	0					; Background color line 0, color 0
	dc.b	0					; Unused
	dc.b	0					; Unused
	dc.b	256-1					; H-INT every 256 scanlines
	dc.b	0					; EXT-INT off, scroll by screen
	dc.b	%10000001				; H40 mode, S/H mode off, no interlace
	dc.b	$FC00/$400				; HScroll table address
	dc.b	0					; Unused
	dc.b	1					; Auto increment 1 (for DMA)
	dc.b	%00000001				; 64x32 tilemap
	dc.b	0					; Window X
	dc.b	0					; Window Y
	dc.b	$FF					; DMA clear length $10000 bytes
	dc.b	$FF
	dc.b	$00					; DMA clear source $0000
	dc.b	$00
	dc.b	$80
.VDPRegsEnd:

	VDPCMD	dc.l,$0000,VRAM,DMA			; VRAM DMA command

.InitZ80Prg:
	CPU	Z80
	OBJ	0
		di					; Disable interrupts
		ld	hl,.Z80Clear			; Clear the rest of Z80 RAM
		ld	de,.Z80Clear+1
		ld	bc,2000h-(.Z80Clear+1)
		ldir
		jr	*				; Loop here forever
.Z80Clear:
	db	0
	OBJEND
	CPU	68000
.InitZ80PrgEnd:
	even

; ---------------------------------------------------------------------------
; Error exceptions
; ---------------------------------------------------------------------------

	if DEBUG=0
BusError:
AddressError:
IllegalInstr:
ZeroDivide:
ChkInstr:
TrapvInstr:
PrivilegeViol:
Trace:
Line1010Emu:
Line1111Emu:
ErrorExcept:
		nop
		nop
		bra.s	ErrorExcept
	else
		include	"_lib/error.m68k"
	endif

; ---------------------------------------------------------------------------
; Libraries
; ---------------------------------------------------------------------------

	include	"_lib/decompress.68k"			; Decompression library
	include	"_lib/mode1.m68k"			; Mode 1 library
	include	"_lib/text.m68k"			; Text library
	include	"_lib/dma.m68k"				; DMA library
	
; ---------------------------------------------------------------------------
; Main source
; ---------------------------------------------------------------------------

	include	"main.m68k"

; ---------------------------------------------------------------------------
